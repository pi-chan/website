<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | xoyipメモ置き場]]></title>
  <link href="http://site.piyox.info/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://site.piyox.info/"/>
  <updated>2014-04-30T11:19:58+09:00</updated>
  <id>http://site.piyox.info/</id>
  <author>
    <name><![CDATA[xoyip]]></name>
    <email><![CDATA[xoyip@piyox.info]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[duplicate files copied in apk]]></title>
    <link href="http://site.piyox.info/blog/2014/04/30/android-duplicate-copy/"/>
    <updated>2014-04-30T11:18:10+09:00</updated>
    <id>http://site.piyox.info/blog/2014/04/30/android-duplicate-copy</id>
    <content type="html"><![CDATA[<p><code>duplicate files copied in apk</code>が出た時は怒られた対象のファイルをbuild.gradleで<code>exclude</code>すれば回避できる。</p>

<p>```javascript
android {</p>

<pre><code>packagingOptions {
    exclude 'META-INF/LICENSE.txt'
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidでGoogleアカウントを選択]]></title>
    <link href="http://site.piyox.info/blog/2014/04/30/android-accountpicker/"/>
    <updated>2014-04-30T11:09:00+09:00</updated>
    <id>http://site.piyox.info/blog/2014/04/30/android-accountpicker</id>
    <content type="html"><![CDATA[<h1>ログインボタン</h1>

<p>↓を実行。</p>

<p>```java
Intent intent = AccountPicker.newChooseAccountIntent(null, null, new String[]{&ldquo;com.google&rdquo;},</p>

<pre><code>    false, null, null, null, null);
</code></pre>

<p>startActivityForResult(intent, PICK_ACCOUNT_REQUEST);
```</p>

<h1>処理が終わったら</h1>

<p>選択されたアカウントを選び、そのアカウント名でTokenを取得。</p>

<p>```java
case PICK_ACCOUNT_REQUEST:</p>

<pre><code>if (resultCode == RESULT_OK) {
    String accountName = data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
    LOG.debug("Selected Account {}", accountName);
    selectedAccount =  null;
    for (Account a:list) {
        if (a.name.equals(accountName)) {
            selectedAccount = a;
            break;
        }
    }
    selectedAccountName = accountName;
    am.getAuthToken(
            selectedAccount,       // Account retrieved using getAccountsByType()
            "lh2",                 // Auth scope
            null,                  // Authenticator-specific options
            this,                  // Your activity
            new OnTokenAcquired(), // Callback called when a token is successfully acquired
            null);                 // Callback called if an error occ
}
break;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidでPicasaにアクセスするときに依存するライブラリ]]></title>
    <link href="http://site.piyox.info/blog/2014/04/30/android-gdata-api/"/>
    <updated>2014-04-30T11:03:36+09:00</updated>
    <id>http://site.piyox.info/blog/2014/04/30/android-gdata-api</id>
    <content type="html"><![CDATA[<h1>libsに直接置いたもの</h1>

<ul>
<li>gdata-client-1.0.jar</li>
<li>gdata-core-1.0.jar</li>
<li>gdata-media-1.0.jar</li>
<li>gdata-photos-2.0.jar</li>
</ul>


<h1>build.gradle</h1>

<ul>
<li><code>compile 'com.android.support:appcompat-v7:+'</code></li>
<li><code>compile 'com.google.android.gms:play-services:+'</code></li>
<li><code>compile fileTree(dir: 'libs', include: ['*.jar'])</code></li>
<li><code>compile 'com.google.guava:guava:16.0.1'</code></li>
<li><code>compile 'javax.activation:activation:1.1'</code></li>
<li><code>compile 'javax.mail:mail:1.4'</code></li>
<li><code>compile 'com.google.code.findbugs:jsr305:1.3.9'</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android端末の写真をコードから削除]]></title>
    <link href="http://site.piyox.info/blog/2014/04/23/android-delete-photo/"/>
    <updated>2014-04-23T14:25:57+09:00</updated>
    <id>http://site.piyox.info/blog/2014/04/23/android-delete-photo</id>
    <content type="html"><![CDATA[<h1>パーミッションが必要</h1>

<p>これ超ハマった</p>

<p>```xml
<manifest></p>

<pre><code>&lt;application&gt;
&lt;/application&gt;

&lt;!-- これ！ --&gt;
&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;
</code></pre>

<p></manifest>
```</p>

<h1>コード</h1>

<p>```java
public class MainActivity extends ActionBarActivity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // ボタンクリックで写真選択へ
    Button b = (Button)findViewById(R.id.button_open);
    b.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Intent intent = new Intent();
            intent.setType("image/*");
            intent.setAction(Intent.ACTION_PICK);
            startActivityForResult(intent, 0);
        }
    });
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    if (requestCode == 0 &amp;&amp; resultCode == RESULT_OK) {
        try {
            getContentResolver().delete(data.getData(), null, null);
        } catch (Exception e){
            Log.d("MainActivity", e.getMessage());
        }
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidバックグラウンドでの定期処理]]></title>
    <link href="http://site.piyox.info/blog/2014/04/23/android-alarm-service/"/>
    <updated>2014-04-23T12:27:44+09:00</updated>
    <id>http://site.piyox.info/blog/2014/04/23/android-alarm-service</id>
    <content type="html"><![CDATA[<p>Androidでバックグランド処理を実行する方法。ここが簡潔にまとまっていていい。</p>

<p><a href="http://android.keicode.com/basics/services-schedule-with-alarmmanager.php">AlarmService を利用したサービス実行のスケジューリング &ndash; Android 開発入門</a></p>

<h1>サービスを登録・解除する画面</h1>

<p>```java
// MainActivity.java</p>

<p>AlarmManager mManager;
final static String TAG = &ldquo;AlarmService&rdquo;;</p>

<p>// サービスの登録・解除で共通の処理
private PendingIntent pendingIntent() {</p>

<pre><code>Context context = getBaseContext();
Intent intent = new Intent(context, AlarmService.class);
PendingIntent pi = PendingIntent.getService(
  context, -1, 
  intent, PendingIntent.FLAG_UPDATE_CURRENT
);
return pi;
</code></pre>

<p>}</p>

<p>// サービスを登録するときに呼び出せばOK
private void scheduleService(){</p>

<pre><code>mManager.setInexactRepeating(
        AlarmManager.RTC,
        System.currentTimeMillis(),
        AlarmManager.INTERVAL_HOUR, // 1時間毎に呼び出す
        pendingIntent()
);
</code></pre>

<p>}</p>

<p>// サービスを解除したいときに呼び出す
private void cancelService(){</p>

<pre><code>mManager.cancel(pendingIntent());
</code></pre>

<p>}
```</p>

<h1>サービス本体</h1>

<p>```java
// AlarmService.java</p>

<p>public class AlarmService extends IntentService {</p>

<pre><code>final static String TAG = "AlarmService";

public AlarmService(){
    super(TAG);
}

@Override
protected void onHandleIntent(Intent intent) {
    Log.d(TAG, "onHandleIntent");
}
</code></pre>

<p>}
```</p>

<h1>AndroidManifest.xml</h1>

<p>AndroidManifest.xmlにサービスについて記載が必要なので、</p>

<p>```xml
<application></p>

<pre><code>&lt;activity&gt;
&lt;/activity&gt;
&lt;service android:name=".AlarmService" /&gt; &lt;!-- この行！ --&gt;
</code></pre>

<p></application>
```</p>
]]></content>
  </entry>
  
</feed>
